import gzip
import sys
import Variant_types
import Gene_lists

global vcf

def open_vcf():

	file = sys.argv[1]
	

	if file[len(file)-2:len(file)] == "gz":
		vcf = gzip.open(sys.argv[1], 'rt')

	elif file[len(file)-3:len(file)] == "vcf":
		vcf = open(sys.argv[1])

	else:
		vcf = ""
		print("incorrect file type")
		sys.exit(0)
		

	return vcf

vcf = open_vcf()


#vcf = gzip.open("DX202588_01-DX202375_01_var_annotated.vcf.gz", 'rt')
#file = open("DX202588_01-DX202375_01_var_annotated.vcf",'r')

def tuple_in_float(f): # convert the information in float (0,0 -> 0.0)
	g = ""
	for i in f:
		if i == ',':
			i = '.'
		g = g + i
	if len(g) > 1:
		g = float(g)
	if g == ".":
		g = ""
	return g




def read_vcf(file):
	global line
	global v
	global snp
	global deletion
	global insertion
	global synonymous
	global missense
	global intron
	global intergenic
	global regulatory
	global downstream
	global upstream
	global three_prime
	global splice_intron
	global intron_noncoding
	global frameshift
	global five_prime
	global stop
	global splicedonor
	global liste
	global nonsynonymous
	global high
	global moderate
	global low
	global modifier
	global hrgenes_list
	global gene_list
	global resistance_genes_list
	global varianttype
	global name_vcf



	v = 0
	snp = 0
	deletion = 0
	insertion = 0
	synonymous = 0
	missense = 0
	intron = 0
	intergenic = 0
	regulatory = 0
	downstream = 0
	upstream = 0
	three_prime = 0
	splice_intron = 0
	intron_noncoding = 0
	frameshift = 0
	five_prime = 0
	stop = 0
	splicedonor = 0
	nonsynonymous = 0
	variant = ""
	high = 0
	moderate = 0
	low = 0
	modifier = 0
	name_vcf = str(sys.argv[1])


#	hrgenes_list = [["ATM", 0,], ["BRCA1", 0,], ["BRCA2", 0,], ["CHECK2", 0,], ["ERCC3", 0,], ["FANCA", 0,], ["HDAC2", 0,], ["MLH3", 0,], ["MRE11", 0,], ["NBN", 0,], ["PALB2", 0,], ["RAD51", 0,], ["ATR", 0,], ["ERCC6", 0,], ["FANCC", 0,], ["FANCG", 0,], ["FANCD2", 0,], ["PTEN", 0,], ["RAD18", 0,],["RAD51B", 0,], ["Rd54l", 0,], ["RPA1", 0,], ["XRCC3", 0,]]

	# Genes that can result in Resistance to ICB when altered:
	# IFR == TRIM63  -> TRIM63 is the newer label for the gene
#	resistance_genes_list = [["PTEN", 0], ["EGFR", 0], ["MYC", 0], ["JAK1", 0], ["JAK2",0], ["IFNGR1", 0], ["IFNGR2", 0], ["IRF", 0], ["TRIM63",0] ]

#	gene_list = [["ATM", 0], ["BRCA1", 0], ["BRCA2", 0], ["CHECK2", 0], ["ERCC3", 0], ["FANCA", 0], ["HDAC2", 0], ["MLH3", 0], ["MRE11", 0], ["NBN", 0], ["PALB2", 0], ["RAD51", 0], ["ATR", 0], ["ERCC6", 0], ["FANCC", 0], ["FANCG", 0], ["FANCD2", 0], ["PTEN", 0], ["RAD18", 0],["RAD51B", 0], ["Rd54l", 0], ["RPA1", 0], ["XRCC3", 0]]

	hrgenes_list = Gene_lists.hrgenes_list
	resistance_genes_list = Gene_lists.resistance_genes_list
	gene_list = Gene_lists.gene_list


	au_normal = 0	# "Number of 'A' alleles used in tiers 1,2"
	cu_normal = 0	# "Number of 'C' alleles used in tiers 1,2"
	gu_normal = 0 	# "Number of 'G' alleles used in tiers 1,2"
	tu_normal = 0 	# "Number of 'T' alleles used in tiers 1,2"

	au_tumor = 0	# "Number of 'A' alleles used in tiers 1,2"
	cu_tumor = 0 	# "Number of 'C' alleles used in tiers 1,2"
	gu_tumor = 0 	# "Number of 'G' alleles used in tiers 1,2"
	tu_tumor = 0 	# "Number of 'T' alleles used in tiers 1,2"
	
	allele_frequency = 0
	variant_allele_frequency = 0
	
	print('Analyse of the vcf file \"{}\" \n'.format(name_vcf))

	line = "variant"
	while line != "":
		line = vcf.readline()				# read line by line
		if line == "":
			break
		if line[0] != "#": 				# read in all lines except the header -> read in all variants
			v += 1				# counting the number of variants
			
							# splitt the lines to analyse the information for each variant
			data = line.split()			
			
			chromosom = data[0]
			ref = data[3]
			alt = data[4]


			
			info = str(data[7]).split(";") # split the 8. clolumn -> contains additional information for each variant
			

			
			normal = (data[9]).split(":")
			tumor = (data[10]).split(":") 
			

		
			# convert the information in float (0,0 -> 0.0)
			au_tumor = tuple_in_float(tumor[0])
			cu_tumor = tuple_in_float(tumor[2])
			gu_tumor = tuple_in_float(tumor[8])
			tu_tumor = tuple_in_float(tumor[15])


			au_normal = tuple_in_float(normal[0])
			cu_normal = tuple_in_float(normal[2])
			gu_normal = tuple_in_float(normal[8])
			tu_normal = tuple_in_float(normal[15])	


			# assignment of the number of A, C, G or T alleles respecting the reference base(s) and the alternate alleles
			if alt == 'A':
				alt_number = au_tumor
			if alt == 'C':
				alt_number = cu_tumor
			if alt == 'G':
				alt_number = gu_tumor
			if alt == 'T':
				alt_number = tu_tumor

			if ref == 'A':
				ref_number = au_normal
			if ref == 'C':
				ref_number = cu_normal
			if ref == 'G':
				ref_number = gu_normal
			if ref == 'T':
				ref_number = tu_normal



			# checking if information for read depth is available
			depth = info[0]

			CSQ = str(info[13]).split("|")		# Consequences of the INFO field, on thirteenth place, if read depth is not available on p fourteenth place
			
			if depth[0] != 'D' or depth[1] != 'P':
				depth = 'DP'
				allele_frequency = ""
				dp = ''
				CSQ = str(info[14]).split("|")		# Consequences of the INFO field, on thirteenth place, if read depth is not available on p fourteenth place
			else: 
				dp = depth[3:(len(depth))]
				dp = int(dp)
	

			# calculating (variant) Allele Frequencies if read depth and the number of alternating allele are available
			if isinstance(dp, str) or isinstance(alt_number, str):
				allele_frequency = ""
				variant_allele_frequency = ""
			else:
				allele_frequency = ref_number / dp
				variant_allele_frequency = alt_number / dp


			# comparison of reference and alternating allele and assignment of the type of variant: snp, deletion or insertion

			if len(ref) == len(alt):	# character length equal -> SNP
				snp += 1			
				variant = "snp:"
				
			elif len(ref) > len(alt):
				deletion += 1		# higher character length of the reference -> Deletion
				variant = "deletion:"
				
			elif len(ref) < len(alt):
				insertion += 1		# higher character length of the alternating allele -> Insertion
				variant = "insertion:"
				
		

		
	


			varianttype = CSQ[1]			# Variant types of the Consequences
			impact = CSQ[2]				# Impact of the variant: high, moderate, low, modifier
			gene = CSQ[3]
			biotype = CSQ[22]



			if impact == "HIGH":	# counting variant number that has a HIGH impact
				high += 1			

			if impact == "MODERATE":	# counting variant number that has a MODERATE impact
				moderate += 1			

			if impact == "LOW":	# counting variant number that has a LOW impact
				low += 1			

			if impact == "MODIFIER":	# counting variant number that has a MODIFIER impact
				modifier += 1			


			for gene_info in hrgenes_list:						
			# is affected gene a homolougous recombination gene?
				for gene_name in gene_info:
					if gene == gene_name:
						i_tupel = hrgenes_list.index(gene_info)
						i_name = 0
						i_count = 1
						i_type = 2
						
						hrgenes_list[i_tupel][i_count] += 1
						info = hrgenes_list[i_tupel]
						info.append([varianttype, impact, biotype, v])
						#info.append([biotype])

			for gene_info in resistance_genes_list:						
			# is affected gene a gene that can result in Resistance to ICB?
				for gene_name in gene_info:
					if gene == gene_name:
						i_tupel = resistance_genes_list.index(gene_info)
						i_name = 0
						i_count = 1
						i_type = 2
						
						resistance_genes_list[i_tupel][i_count] += 1
						info = resistance_genes_list[i_tupel]
						info.append([varianttype, impact, biotype, v])
						
						

			count = 0
			for gene_info in gene_list:
				gene_name = gene_info[0]
				
				if gene == gene_name:
					i_tupel = gene_list.index(gene_info)
					i_count = 1
					i_type = 2
					
					gene_list[i_tupel][i_count] += 1
					count += 1
					info = gene_list[i_tupel]
					info.append([varianttype, impact, biotype, v])
					#info.append([biotype])
					#info.append(impact)
			if count == 0 and gene != '':				
				gene_list.append([gene,1, [varianttype, impact, biotype, v]])
			


				


			# print individual information for each Variant 
			print(chromosom)
			print(variant, ref, alt)
			print(varianttype)
			print("Gene: ", gene, "			", biotype)
			print("impact: ", impact)
			print(" ")
			print(depth)
			print("A_n:", au_normal, "	", "A_t:", au_tumor)
			print("C_n:", cu_normal, "	", "C_t:", cu_tumor)
			print("G_n:", gu_normal, "	", "G_t:", gu_tumor)
			print("T_n:", tu_normal, "	", "T_t:", tu_tumor)
#			print("Allele Frequency:", allele_frequency)
			print("Variant Allele Frequency:", variant_allele_frequency)	
			print("\n")


			# count the different types of variants
			if varianttype == "synonymous_variant":
				synonymous += 1
			elif varianttype == "missense_variant":
				missense += 1
			elif varianttype == "intron_variant":
				intron += 1
			elif varianttype == "intergenic_variant":
				intergenic += 1
			elif varianttype == "regulatory_region_variant":
				regulatory += 1
			elif varianttype == "downstream_gene_variant":
				downstream += 1
			elif varianttype == "upstream_gene_variant":
				upstream += 1
			elif varianttype == "splice_region_variant&intron_variant":
				splice_intron += 1
			elif varianttype == "3_prime_UTR_variant":
				three_prime += 1
			elif varianttype == "intron_variant&non_coding_transcript_variant":
				intron_noncoding += 1
			elif varianttype == "frameshift_variant":
				frameshift += 1
			elif varianttype == "splice_donor_variant":
				splicedonor += 1
			elif varianttype == "5_prime_UTR_variant":
				five_prime += 1
			elif varianttype == "stop_gained":
				stop += 1

	return (v, snp, deletion, insertion, synonymous, missense, intron, intergenic, regulatory, downstream, upstream, three_prime, splice_intron, intron_noncoding, frameshift, five_prime, stop, splicedonor, varianttype)
		





def output(file):
	read_vcf(vcf)
	nonsynonymous = missense + frameshift + stop


	o = open("parse_vcf_output.txt", "w") 	

	o.write('Analyse of the vcf file \"{}\" \n'.format(name_vcf))
	#o.write('\033[1m' + "TEST")
	o.write("\n")
	o.write('The analysed sample contains ')
	o.write('{} Variants, including 	{} SNPs, \n							  {} Deletions, \n	 						  {} Insertions \n'.format(v, snp, deletion, insertion))
	o.write('\n')
	o.write('{} synonymous Variants\n'.format(synonymous))
	o.write('{} nonsynonymous Variants: {} missense Variants'.format(nonsynonymous, missense))
	o.write('\n			    {} frameshift Variants'.format(frameshift))
	o.write('\n			    {} stop gained \n'.format(stop))
	o.write('\n')
	#o.write('{} intron Variants\n'.format(intron))
	#o.write('{} intergenic Variants\n'.format(intergenic))
	#o.write('{} downstream gene Variants\n'.format(downstream))
	#o.write('{} 3-prime UTR Variants\n'.format(three_prime))
	#o.write('{} upstream gene Variants\n'.format(upstream))
	#o.write('{} splice region and intron Variants\n'.format(splice_intron))
	#o.write('{} intron and non coding transcript Variants\n'.format(intron_noncoding))
	#o.write('{} 5-prime UTR Variants\n'.format(five_prime))
	#o.write('{} regulatory region Variants\n'.format(regulatory))
	#o.write('{} splice donor variants\n'.format(splicedonor))
	o.write('\n')

	o.write("\n\n")
	# output of the variations in homologous recombination genes
	o.write('Variations in homologous recombination genes\n\n'.format())
	for gene_info in hrgenes_list:
		gene_count = gene_info[1]
		# output only printed if there are variants:	
		if gene_count > 0:
			gene_name = gene_info[0]
			# for only 1 variant per gene:
			if gene_count == 1:
				variant = gene_info[2]
				vtype = variant[0]
				vimpact = variant [1]
				vbiotype = variant[2]
				o.write('\n{}:	{} Mutation:	{}	impact: {}	biotype: {}	 \n'.format(gene_name, gene_count, vtype, vimpact, vbiotype))
			# for more than one variants per gene: 
			if gene_count >= 2:
				variant = gene_info[2]
				vtype = variant[0]
				vimpact = variant[1]
				vbiotype = variant[2]
				o.write('\n{}:	{} Mutations:'.format(gene_name, gene_count)) 
				o.write('	{}	impact: {}	biotype: {}	 \n'.format(vtype, vimpact, vbiotype))

			for variants in Variant_types.nonsynonymous:
				#o.write(" {}".format(variant))
				#o.write(" {}".format(variants[0]))
				if vtype == variants[0]:
					o.write("	nonsynonymous variant")
			for variants in Variant_types.synonymous:
				if vtype == variants[0]:
					o.write("	synonymous variant")

				for i in range(3,len(gene_info)):
					variant = gene_info[i]
					vtype = variant[0]
					vimpact = variant[1]
#					vbiotype = variant[2]
					o.write('			{}	impact: {}	'.format(vtype, vimpact))
					for variants in Variant_types.nonsynonymous:
				#o.write(" {}".format(variant))
				#o.write(" {}".format(variants[0]))
						if vtype == variants[0]:
							o.write("	nonsynonymous variant\n")
					for variants in Variant_types.synonymous:
						if vtype == variants[0]:
							o.write("	synonymous variant")


					o.write('\n')
	o.write('\n')
	o.write('\n')
	o.write("Variations in genes that can result n Resistance to ICB")
	o.write("\n")
	o.write('\n')
	for gene_info in resistance_genes_list:
		gene_count = gene_info[1]
		# output only printed if there are variants:	
		if gene_count > 0:
			gene_name = gene_info[0]
			# for only 1 variant per gene:
			if gene_count == 1:
				variant = gene_info[2]
				vtype = variant[0]
				vimpact = variant [1]
				vbiotype = variant[2]
				o.write('\n{}:	{} Mutation:	{}	impact: {}	biotype: {}	 \n'.format(gene_name, gene_count, vtype, vimpact, vbiotype))
			# for more than one variants per gene: 
			if gene_count >= 2:
				variant = gene_info[2]
				vtype = variant[0]
				vimpact = variant[1]
				vbiotype = variant[2]
				o.write('\n{}:	{} Mutations:'.format(gene_name, gene_count)) 
				o.write('	{}	impact: {}	biotype: {}	 \n'.format(vtype, vimpact, vbiotype))

			for variants in Variant_types.nonsynonymous:
				#o.write(" {}".format(variant))
				#o.write(" {}".format(variants[0]))
				if vtype == variants[0]:
					o.write("	nonsynonymous variant")
			for variants in Variant_types.synonymous:
				if vtype == variants[0]:
					o.write("	synonymous variant")

				for i in range(3,len(gene_info)):
					variant = gene_info[i]
					vtype = variant[0]
					vimpact = variant[1]
#					vbiotype = variant[2]
					o.write('			{}	impact: {}	'.format(vtype, vimpact))
					for variants in Variant_types.nonsynonymous:
				#o.write(" {}".format(variant))
				#o.write(" {}".format(variants[0]))
						if vtype == variants[0]:
							o.write("	nonsynonymous variant\n")
					for variants in Variant_types.synonymous:
						if vtype == variants[0]:
							o.write("	synonymous variant")


					o.write('\n')

		
	o.write('\n')
	o.write('\n')
	# output of the genes with variations
	o.write('Genes that are affected of Variations\n\n')
	for gene_info in gene_list:
		gene_count = gene_info[1]
		# output, if the gene has at least one variant	
		if gene_count > 0:
			gene_name = gene_info[0]
			# for genes with short name (formatting)	
			if len(gene_name) < 7:
				variant = gene_info[2]
				vtype = variant[0]
				vimpact = variant[1]
				vbiotype = variant[2]
				#for genes with only one variant
				if gene_count == 1:

					o.write('\n{}:		{} Mutation:	{}	impact: {}	biotype: {}	'.format(gene_name, gene_count, vtype, vimpact, vbiotype))
				
				# for genes with more than one variant
				if gene_count >= 2:
					o.write('\n{}:		{} Mutations:	'.format(gene_name, gene_count)) 
					o.write('{}	impact: {}	biotype: {}	'.format(vtype, vimpact, vbiotype))
				for variants in Variant_types.nonsynonymous:
				#o.write(" {}".format(variant))
				#o.write(" {}".format(variants[0]))
					if vtype == variants[0]:
						o.write("		nonsynonymous variant")
				for variants in Variant_types.synonymous:
					if vtype == variants[0]:
						o.write("	synonymous variant")
				for i in range(3,len(gene_info)):
					variant = gene_info[i]
					vtype = variant[0]
					vimpact = variant[1]
#					vbiotype = variant[2]
					o.write('\n				{}	impact: {}	'.format(vtype, vimpact))
					for variants in Variant_types.nonsynonymous:
				
						if vtype == variants[0]:
							o.write("		nonsynonymous variant")
					for variants in Variant_types.synonymous:
						if vtype == variants[0]:
							o.write("		synonymous variant")

			

			o.write("\n")
			# for genes with longer name (formatting)
			if len(gene_name) > 6:
				variant = gene_info[2]
				vtype = variant[0]
				vimpact = variant[1]
				vbiotype = variant[2]
				#for genes with only one variant
				if gene_count == 1:
	
					o.write('\n{}:	{} Mutation:	{}	impact: {}	biotype: {}	'.format(gene_name, gene_count, vtype, vimpact, vbiotype))
				# for genes with more than one variant
				if gene_count >= 2:
					o.write('\n{}:	{} Mutations:	'.format(gene_name, gene_count))
					o.write('{}	impact: {}	biotype: {}	'.format(vtype, vimpact, vbiotype))

				for variants in Variant_types.nonsynonymous:
					if vtype == variants[0]:
						o.write("		nonsynonymous variant")
				for variants in Variant_types.synonymous:
					if vtype == variants[0]:
						o.write("		synonymous variant")

				o.write('\n')
				for i in range(3,len(gene_info)):
					variant = gene_info[i]
					vtype = variant[0]
					vimpact = variant[1]
					o.write('				{}	impact: {}	'.format(vtype, vimpact))
			
					for variants in Variant_types.nonsynonymous:
						if vtype == variants[0]:
							o.write("		nonsynonymous variant")
					for variants in Variant_types.synonymous:
						if vtype == variants[0]:
							o.write("		synonymous variant")

	
		
					o.write('\n')


	o.close()

	

	print(v, "Variants:	", snp, "SNPs,")#, deletion, "Deletions,", insertion, "Insertions")
	print("		", deletion, "Deletions")
	print("		",  insertion, "Insertions")
	print("\n")

	print(high, "variants with high impact") 
	print(moderate, "variants with moderate impact") 
	print(low, "variants with low impact") 
	print(modifier, "variants with modifier impact") 



	print("")
	print(synonymous, "synonymous Variants") 
	print(nonsynonymous, "non-synonymous Variants:	", missense,"missense Variants,")#, frameshift, "frameshift Variants,", stop, "stop gained," ) 
	print("				",frameshift, "frameshift Variants")
	print("				", stop, "stop gained")
	print('')
	#print(intron, "intron Variants") 
	#print(intergenic, "intergenic Variants") 

	#print(downstream, "downstream gene Variants") 
	#print(three_prime, "3-prime UTR Variants")
	#print(upstream, "upstream gene Variants")
	#print(splice_intron, "splice region and intron Variants") 
	#print(intron_noncoding, "intron and non coding transcript Variants") 
	#print(five_prime, "5-prime UTR Variants")
	#print(regulatory, "regulatory region Variants") 
	#print(splicedonor, "splice donor variants") 
	print("")


	print("The output is stored in ", "'parse_vcf_output.txt'")





output(vcf)

vcf.close()

