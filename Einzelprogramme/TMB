import gzip, sys


global vcf
global bed
#global v
v = 0
#global sequenced_bases
sequenced_bases = 0

def open_bed():
	bedfile = sys.argv[2]

	if bedfile[len(bedfile)-3:len(bedfile)] == "bed":
		bed = open(sys.argv[2])

	else:
		print("incorrect file type for the second argument")
		bed = ""
		sys.exit(0)
	return bed

bed = open_bed()


def open_vcf():

	file = sys.argv[1]
	#bedfile = sys.argv[2]

	if file[len(file)-2:len(file)] == "gz":
		vcf = gzip.open(sys.argv[1], 'rt')

	elif file[len(file)-3:len(file)] == "vcf":
		vcf = open(sys.argv[1])

	else:
		print("incorrect file type for the first argument")
		vcf = ""
		sys.exit(0)
		

		

	return vcf

vcf = open_vcf()

# count the number of sequenced bases
def count_bases():
	line = "sequenced"
	global sequenced_bases
	#sequenced_bases = 0
	#line = bed.readline()
	while line != "":
		line = bed.readline()
		if line == "":
			break
		data = line.split()
		start = int(data[1]) # sequence start

		end = int(data[2]) # sequence end

		bases = end - start # number of sequenced bases 
		sequenced_bases = sequenced_bases + bases
#	print("sequenced: ", sequenced_bases)
	return(sequenced_bases)


#	bed.close()
#print("count",count_bases())

# read in all variants,line by line
def count_variants():
	global v
	line2 = "variant"

	while line2 != "":
		line2 = vcf.readline()			
		if line2 == "":
			break
		if line2[0] != "#": 			
			v += 1
	#print()

#	print("v", v)				
	return(v)

#	vcf.close()

#count_variants()

#Test ob es funktioniert: -> hat nur mit explizitem Aufruf von Python3 funktioniert, sonstgibt es als Ergebnis 0 aus

#print("variants",count_variants(), "bases", count_bases())
#print("v", v, "bases", sequenced_bases)
#print("ergebnis")
#print(v/sequenced_bases)
#i = v / sequenced_bases
#print("i", i)
#print(count_variants() / count_bases())


# naive calculation of Tumor Mutational Burden TMB
def TMB():
	TMB = count_variants()/count_bases()
#	print(TMB)
#	TMB = v / sequenced_bases
#	print(TMB)
	print("TMB =", TMB) #count_variants()/count_bases())

TMB()
vcf.close()
bed.close()
