import gzip
import sys

global vcf

def open_vcf():

	file = sys.argv[1]
	

	if file[len(file)-2:len(file)] == "gz":
		vcf = gzip.open(sys.argv[1], 'rt')

	elif file[len(file)-3:len(file)] == "vcf":
		vcf = open(sys.argv[1])

	else:
		vcf = ""
		print("incorrect file type")
		sys.exit(0)
		

	return vcf

vcf = open_vcf()


#vcf = gzip.open("DX202588_01-DX202375_01_var_annotated.vcf.gz", 'rt')
#file = open("DX202588_01-DX202375_01_var_annotated.vcf",'r')

def tuple_in_float(f): # convert the information in float (0,0 -> 0.0)
	g = ""
	for i in f:
		if i == ',':
			i = '.'
		g = g + i
	if len(g) > 1:
		g = float(g)
	if g == ".":
		g = ""
	return g




def read_vcf(file):
	global line
	global v
	global snp
	global deletion
	global insertion
	global synonymous
	global missense
	global intron
	global intergenic
	global regulatory
	global downstream
	global upstream
	global three_prime
	global splice_intron
	global intron_noncoding
	global frameshift
	global five_prime
	global stop
	global splicedonor
	global liste
	global nonsynonymous


	v = 0
	snp = 0
	deletion = 0
	insertion = 0
	synonymous = 0
	missense = 0
	intron = 0
	intergenic = 0
	regulatory = 0
	downstream = 0
	upstream = 0
	three_prime = 0
	splice_intron = 0
	intron_noncoding = 0
	frameshift = 0
	five_prime = 0
	stop = 0
	splicedonor = 0
	nonsynonymous = 0
	variant = ""


	au_normal = 0	# "Number of 'A' alleles used in tiers 1,2"
	cu_normal = 0	# "Number of 'C' alleles used in tiers 1,2"
	gu_normal = 0 	# "Number of 'G' alleles used in tiers 1,2"
	tu_normal = 0 	# "Number of 'T' alleles used in tiers 1,2"

	au_tumor = 0	# "Number of 'A' alleles used in tiers 1,2"
	cu_tumor = 0 	# "Number of 'C' alleles used in tiers 1,2"
	gu_tumor = 0 	# "Number of 'G' alleles used in tiers 1,2"
	tu_tumor = 0 	# "Number of 'T' alleles used in tiers 1,2"
	
	allele_frequency = 0
	variant_allele_frequency = 0
	

	line = "variant"
	while line != "":
		line = vcf.readline()				# read line for line
		if line == "":
			break
		if line[0] != "#": 				# read in all lines except the header -> read in all variants
			v += 1				# counting the number of variants
			
							# splitt the lines to analyse the information for each variant
			data = line.split()			
			
			chromosom = data[0]
			ref = data[3]
			alt = data[4]


			
			info = str(data[7]).split(";") # split the 8. clolumn -> contains additional information for each variant
			

			
			normal = (data[9]).split(":")
			tumor = (data[10]).split(":") 
			

		
			# convert the information in float (0,0 -> 0.0)
			au_tumor = tuple_in_float(tumor[0])
			cu_tumor = tuple_in_float(tumor[2])
			gu_tumor = tuple_in_float(tumor[8])
			tu_tumor = tuple_in_float(tumor[15])


			au_normal = tuple_in_float(normal[0])
			cu_normal = tuple_in_float(normal[2])
			gu_normal = tuple_in_float(normal[8])
			tu_normal = tuple_in_float(normal[15])	


			# assignment of the number of A, C, G or T alleles respecting the reference base(s) and the alternate alleles
			if alt == 'A':
				alt_number = au_tumor
			if alt == 'C':
				alt_number = cu_tumor
			if alt == 'G':
				alt_number = gu_tumor
			if alt == 'T':
				alt_number = tu_tumor

			if ref == 'A':
				ref_number = au_normal
			if ref == 'C':
				ref_number = cu_normal
			if ref == 'G':
				ref_number = gu_normal
			if ref == 'T':
				ref_number = tu_normal


			# checking if information for read depth is available
			depth = info[0]
			
			if depth[0] != 'D' or depth[1] != 'P':
				depth = 'DP'
				allele_frequency = ""
				dp = ''
			else: 
				dp = depth[3:(len(depth))]
				dp = int(dp)
	

			# calculating (variant) Allele Frequencies if read depth and the number of alternating allele are available
			if isinstance(dp, str) or isinstance(alt_number, str):
				allele_frequency = ""
				variant_allele_frequency = ""
			else:
				allele_frequency = ref_number / dp
				variant_allele_frequency = alt_number / dp


			# comparison of reference and alternating allele and assignment of the type of variant: snp, deletion or insertion

			if len(ref) == len(alt):	# character length equal -> SNP
				snp += 1			
				variant = "snp:"
				
			elif len(ref) > len(alt):
				deletion += 1		# higher character length of the reference -> Deletion
				variant = "deletion:"
				
			elif len(ref) < len(alt):
				insertion += 1		# higher character length of the alternating allele -> Insertion
				variant = "insertion:"
				
		

					
	
			CSQ = str(info[14]).split("|")		# Consequences of the INFO field

			varianttype = CSQ[1]			# Variant types of the Consequences


			# print individual information for each Variant 
			print(chromosom)
			print(variant, ref, alt)
			print(varianttype)
			print(depth)
			print("A_n:", au_normal, "	", "A_t:", au_tumor)
			print("C_n:", cu_normal, "	", "C_t:", cu_tumor)
			print("G_n:", gu_normal, "	", "G_t:", gu_tumor)
			print("T_n:", tu_normal, "	", "T_t:", tu_tumor)
#			print("Allele Frequency:", allele_frequency)
			print("Variant Allele Frequency:", variant_allele_frequency, "\n")	


			# count the different types of variants
			if varianttype == "synonymous_variant":
				synonymous += 1
			elif varianttype == "missense_variant":
				missense += 1
			elif varianttype == "intron_variant":
				intron += 1
			elif varianttype == "intergenic_variant":
				intergenic += 1
			elif varianttype == "regulatory_region_variant":
				regulatory += 1
			elif varianttype == "downstream_gene_variant":
				downstream += 1
			elif varianttype == "upstream_gene_variant":
				upstream += 1
			elif varianttype == "splice_region_variant&intron_variant":
				splice_intron += 1
			elif varianttype == "3_prime_UTR_variant":
				three_prime += 1
			elif varianttype == "intron_variant&non_coding_transcript_variant":
				intron_noncoding += 1
			elif varianttype == "frameshift_variant":
				frameshift += 1
			elif varianttype == "splice_donor_variant":
				splicedonor += 1
			elif varianttype == "5_prime_UTR_variant":
				five_prime += 1
			elif varianttype == "stop_gained":
				stop += 1

	return (v, snp, deletion, insertion, synonymous, missense, intron, intergenic, regulatory, downstream, upstream, three_prime, splice_intron, intron_noncoding, frameshift, five_prime, stop, splicedonor)
		



def output(file):
	read_vcf(vcf)
	nonsynonymous = missense + frameshift + stop
	print(v, "Variants:", snp, "SNPs,", deletion, "Deletions,", insertion, "Insertions")

	print("")
	print(synonymous, "synonymous Variants") # Tausch von Basen bewirkt keine Aminosäurenänderung
	print(nonsynonymous, "non-synonymous Variants: ", missense,"missense Variants,", frameshift, "frameshift Variants,", stop, "stop gained," ) # Tausch von Basen bewirkt keine Aminosäurenänderung
	print('')
	print(intron, "intron Variants") # Transkriptvariante, die innerhalb eines Introns aftritt
	print(intergenic, "intergenic Variants") # Veränderung in intergener Region
#	print(missense, "missense Variants") # Änderung einer oder mehrerer Basen, ändert Aminosäure, Sequenzlänge bleibt gleich

	print(downstream, "downstream gene Variants") # Sequenz Variante located 3' of a gene
	print(three_prime, "3-prime UTR Variants") # UTR Variante des 3' UTRs
	print(upstream, "upstream gene Variants") # Sequenz Variante located 5' of a gene
	print(splice_intron, "splice region and intron Variants") # sequenz variante mit Veränderung in der region der splice site, (either within 1-3 bases of the exon or 3-8 bases of the intron) & Transkriptvariante innerhalb des Introns
	print(intron_noncoding, "intron and non coding transcript Variants") # Transkriptvariante innerhalb des Introns & Veränderung in nicht kodierendem Skript
#	print(stop, "stop gained") # min eine Base verändert, dadurch Stop-Codon
	print(five_prime, "5-prime UTR Variants") #UTR Variante des 5' UTRs
#	print (frameshift, "frameshift Variants") # Störung des Leserasters, insertierte / deletierte Basen kein vielfaches von 3
	print(regulatory, "regulatory region Variants") # Sequenzvariante in der regulatorischen Region
	print(splicedonor, "splice donor variants") # Splice Variante die die 2 Basenpaar Region am 5' Ende des Introns verändert that changes the 2 base pair region at the 5' end of an intron.



output(vcf)

vcf.close()

